# Pre-requisites:
# - `valet ensure -f ../../common/workflows/deploy-gloo-enterprise.yaml`

title: Extending a Monlithic Application with Gloo
description: >
  In this workflow, we'll set up the petclinic application, which is a "monolithic" application that
  consists of a backend server and a database. Once this application is configured in Gloo, we'll look at how you
  may deploy a new microservice and connect it to your application. Then we'll
  replace a buggy part of the application with a new implementation in AWS lambda.
# TODO: hack to create a 2nd paragraph...
notes: >
  This workflow assumes you already have a Kubernetes cluster, and you've installed Gloo Enterprise to the gloo-system namespace.
steps:
  - workflow:
      path: ../../common/workflows/deploy-petclinic.yaml
    title: Deploy the Petclinic Monolith
    description: First, let's deploy the petclinic monolith.
  - workflow:
      path: 2-update-vets.yaml
    title: Extend the monolith with a new microservice
    description: >
      We want to modify the application's "vets" page, to include a new column in the table indicating the location
      of the vet. We will solve this by deploying a new microservice that serves the updated version of that page, and
      then add a route to Gloo so that requests for the `/vets` path will be routed to the new microservice.
  - workflow:
      path: 3-fix-contact.yaml
    title: Extend the monolith to an AWS lambda
    description: >
      There is a bug in the monolithic application. If we open up the "contact" page, we'll see an error. Like above, we could solve
      this without modifying the monolith by adding another route to Gloo. In this case, we'll show how you can use Gloo to
      route to serverless functions. We will deploy a lambda to AWS with a new implementation of the contact page, and wire that to
      our application.